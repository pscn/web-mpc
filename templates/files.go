// Code generated by "file2go -output templates/files.go templates/index.html templates/javascript.js templates/style.css templates/theme-default.css templates/theme-juri.css"; DO NOT EDIT.

// Encoded files:
// → templates/index.html
// → templates/javascript.js
// → templates/style.css
// → templates/theme-default.css
// → templates/theme-juri.css

package templates

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io/ioutil"
	"time"
)

// file stores the content and modTime of the decoded string
type file struct {
	content *[]byte
	modTime *time.Time
}

var container map[string]*file

// Init populates *file with data decoded from base64Encoded string
func decode(base64Encoded string) (*file, error) {
  gzipEncoded, err := base64.StdEncoding.DecodeString(base64Encoded)
	if err != nil {
		return nil, fmt.Errorf("failed to decode data(BASE64): %s", err)
	}

	var buf bytes.Buffer
	_, err = buf.Write(gzipEncoded)
	if err != nil {
		return nil, fmt.Errorf("failed buffer decode data: %s", err)
	}

	zr, err := gzip.NewReader(&buf)
	if err != nil {
		return nil, fmt.Errorf("failed to create reader from buffer: %s", err)
	}
	defer zr.Close()

  decoded, err := ioutil.ReadAll(zr)
	if err != nil {
		return nil, fmt.Errorf("failed to decode data(GZIP): %s", err)
	}

	return &file{
		content: &decoded,
		modTime: &zr.ModTime,
	}, nil
}

func init() {
  container = make(map[string]*file)
  var err error
  
  container["templates/index.html"], err = decode(`` +
    `H4sICGdUslwA/2FXNWtaWGd1YUhSdGJBPT0A7Fzbj9s2l3/vX3GqfdmiEkfUXQN7Fm` +
    `mSbhdIuoMkyF7eZIu22cqiP5L2jFv0f/9AUpIlW7bsqWeSfihQdCTq3M+P5BGPnNG3` +
    `b/779af/u38LC7ks7r4ZqT9QZOV8bJHSuvsGYLQgWa4uAEZLIjOYLjIuiBxbazlzEq` +
    `v9qMyWZGwt2YQWxHkgEydbrZxptsomBbFgykpJSjm2tkT0sG0oeVgxLluEDzSXi3FO` +
    `NnRKHH1jAy2ppFnhiGlWkDG2tRwAseC0/NWRzJlROS5ZraCg5a/ASTG2hNwWRCwIkR` +
    `YsOJlVI2gqxDnEckGWxMnJLFsXss30reO0uA3xQsqVuL25mbFSCjRnbF6QbEUFmrLl` +
    `zVSI/5hlS1psxx/YhEn2/XtWMqtyZF/9XTXuOHdPV0PnC0nYWpxWMpJUFuTuf8gE3t` +
    `+/Ht2YW4WBmxoEownLt0DzsaUuWiGAVSYErDKeLYkkXMCMsyUsM1qiOQPJYEHznJRA` +
    `y9VawoySIhc7n3K6gWmRCTG2FjQnjdMjQ670PQgL5HZFxpYkj9KCTVasydj6/Xf0IP` +
    `74o7bkJqebu292Vn38/J9Ap6w0usy42Mwh4zRzjEljS/I1sWDGpmuhkDq2ZlkhiAU6` +
    `QGMrp2JVZNvbkpUty8R2OWGFNk0pcKaUTxXKFYx/YI9jywUXPPVfwwMwMlQwfRxb2L` +
    `VgujV/+dhKrLvRjXnc6LgxSo7qVGYNaVxlcgH52HoPvu3DZ8AxvAMc29iF/1cq1fPz` +
    `FWZrMegjJ1MJZupagQULotA3tnBgwaMe2Y4tX6lWhGfzYa+fcdDm0sDlzCB5uyClvT` +
    `HqUGPcimnyxJhysjnfPpy0NOJhC9Mdufc0+4Rkq0tSnuxSl+jMRTpx0cWJEyTj08X5` +
    `oVH5QiH4No57QtKeeb6ZebGeeCEKnzD1CiouQJWCyU8QwGfwwT+Zr0hT4kSRnoaenV` +
    `YiU0gHRKa1yNOE2MZhJROHgMMBqZpYiz0kHYzfjBU54edGcAme7cECQijAtz0UwgK0` +
    `4gR+Au8pk449DGufg+RZKWaML9UmkZWiyCT5d9d2vO9adLWdguV0xXJ6a7apjE+t3Z` +
    `jCnYNDFPhe6IZWixlaRNux5aHY9f0Qhy1mbmbR7l7Pp34ZQmZcrZotclLmY8vt0usc` +
    `OthDOHWjFNsxikMPx3EAryCyI1ABweDgFIWe5/uxHSM39YMkiHePOwIdz0VRmtiOi3` +
    `Dsey6O/Y4gH6VB4ibYdnyEsYs9/5ig1AQpiO2+WLBVs2V32Fqp4kyqPDlYWf/dIYr3` +
    `FiwUh7slS60GatFK1d/t2Ap7Nqqb+dk4m2TlVUuC/SnoqikYHIV/T5nCSrFeDu7h5w` +
    `HaR1HsRnHktVPRQTP2UeSHcZRcguYzsFwFAKXYC1IX2zhBURKEaQu+LYEYHBcFOMVh` +
    `5PuK1vXC1MUdfKIwDRKcqi0VxWHq4bAXnyHCYaimS+J5XuoHLRlpHQ278RoKcCLbhd` +
    `/a7vUg1Xd7YNpa/dTGZkd62XPwxYtdlXMnp7q+zf9O/r9O8ruUKLQxCnV5f1AD7WBy` +
    `DCecrEg2WNW01quos1wFvctVp+5Si2qLwz9dep2282w4P7fB10yBoOX8orfIuLLPO+` +
    `FRyzpsRxCoLTiEDWDv8pcBbd9TQn9dQ68K+6zM2fKSUlRNxQgKCNQGvIDoZKHsmUI5` +
    `US9sFevFYTcmXraAP5Ot14z8GW+WO9tCFNqx0uXaHuDA3J1+n1GU6uX3pA9e5cPiKa` +
    `8xS5rnw/O160RgnMCu8SIY8EKx4LDhKUAxhcOu41T5frFHEybl+bOhMg9X5sXGJXU/` +
    `aJ7K5WcV/eHsxIPpOVr6FGS4At9pC1CUeH7opWoXdzGOo1Dt7HoI2y5yPT/0VT0RRk` +
    `HsRmp9imI3TJJ2lYBRGnpp4NlOdYUVCgPkq0us55ZfybQ9hAOtpsWfqFcxxWVj5Cs9` +
    `YaoqD6XGC2wPPOTHRn2AAq3dgw14KE0Sbd5vJ0Pf52KAAj0U2DhCASTINXL1rTa6ZV` +
    `6MYqNIC9BXA2dkqHbHR55xB2MUa7+VhhArdwCHlTSttR3PAPnaS61Q2TkArh7hPS6d` +
    `hF2EktTICFAUan9VmajjHiY2RoEejAAjz/ZQYoQfggBj9UJcPQa3khUpaIQVHE6lS2` +
    `2EyNDZAfKwccbBSF9gZYfOWxt+rgGaQk9aqajNtV2UVsFGYYPR0HjVEuG4KDYynDqW` +
    `4YCdCVIbDApMfh1sEhWoSVOFz22A5x6C6jRmleAqe64BP9ZLSK0Fik7kca3ZO2J5dx` +
    `Ec3YjNvN00KFiWA1tz+CXbZGLK6UruWhXVveDTsbV7jn4RSom5actaZrSEOad5b7ND` +
    `Pd21FGr6t5wzDksiRDYnuy5JxarWtobKaksyfBPGc8JJDqaTUrVEWgJaHK9ZKTkr2o` +
    `thrWIqefGRlfNGQyO3edI5UVHGT9eck1IWW8imkm4ICFbOW/Z3FOjuUiPdMCixn9Q4` +
    `cCLob8S603cdHzpCMi71QeyBlFf6QSPG3J6QU0zWyz4xanwnRd31CzngvOdszknTJj` +
    `zQuGqeHwo8aiYpspVQ9V+lTqXirRkDscyKwrpzbz18XEC+5pmkrOxIeFMN1iK8W+zt` +
    `iWg31pp0iwcqpwuYEPlASAm6gyusTr7bsVGqPlPyABP2+IGIFSsF3RDrWChr8ncqwX` +
    `tB1LNU5ZcKkAsCVVtW7/N7eAMYTdZSslL7b47t6zpa9/ZMRd1lqbqElSWqkrDOahnu` +
    `SwEYrQWBx4KWv96anu2/7doHd6ObtSAHms1y1B0yLgyDZC92H00L5Xg8RB/Bs3tfa3` +
    `12/3/g7OHAsLb/E03AXzoAVffjmgHonaGrItvaoLu2QOQUnZyb90W2JfyC2WkY1P9P` +
    `RNj0qPViP7Z6aJ891tqAJ0T6qEecmBP0yqcP5vav7lXV2q8TZe76vsl4KQe1Bc+7RB` +
    `gAf5RsdWqJ1KcUVVx6aJ9/tdQ6XyAQ95xsKFsflCxtlNQkDVD6eZ4fHpxsXiQoP5PH` +
    `g/KjFRDzdUkVjB7aZw+ENuAlAvGBLNnm1F7KDcGXDMYkK18kFq/1sdLxUFTHTlUk+q` +
    `ifPRTGhGetMPZC857l5FT1oAqSH//rf9+/vYUZLXPI1JuDJBwesi1IBpLN5wUBuaCi` +
    `751xT9OH6tS+ivEnw2wOymHJDjasDlI11RtT+3/RXa7qPfypNPX59rbUrn0Rb3Ztim` +
    `ugbwgGVc9yDwZ6dBAGmuqrgIHx4pow0BK/EAz2+rMXuLWf8v6kf6y6pN2km95kX9L3` +
    `CjpNd1barxeq49Wd8aU/Rr1ROpb+Pi+PAODF/BoCwUUOnguP1/U3Tl18VJ/BDAOkIv` +
    `xaEFJ/snV1iFSCvxxGDj5Muh5Ijg6YW12MkDIHNoPWQXjzIwFon6Dok8bP+0eLzZnq` +
    `hpKH+4rM2j9dJ6U8PEOpz0UUx302p2X3TLbn0fGFfka5piTW3Y/qcnhrqN/hDFP9Aj` +
    `fMp940DI8q7Yfpi6w27F3Wb9fxc+o6BH0Hv/Wzt6XklAiYM1gQTvZrxjOPx3RySSn5` +
    `FiRZropMEnigRQETop5PSQ60lKxrVT8Q2oZtm2wKVs4/sIf9vsyRukZRV2A8UUvvrX` +
    `ukKE4uaKui9+DtBWb4iWOqPzerL45A7+vri8Tg+EvpVRe2Qxzdc8quCiJOGW52VRVO` +
    `89q2gn+syXq3Ua44ZV8i0MfPyV4YaypQ3kGgzLdCX0msqg+Xvppw+QfhMh8ifSXhqr` +
    `6K+iLT+PVhBJstp37+qdNM74wOtNJ7hL3qNtW7w0Mt9T55neZ6Z3Sgtd4j7M1+B3v/` +
    `QSPSu/V7OuHn9LV1e3Kg4qtaqz313pENftdu/YE9tr6qeGwXB331TmVO65ezhy3u3e` +
    `9kDfUncyzd+r2s+ZF1b7+389q4niyp7O0b/5XawseD/4GIdbEDt6rX6N63LN24c83w` +
    `hOqy4t+rLXsBZUi/urpR8Fd5bt19//dK9hdcydqL1RvKyVSyFrrOW6/ymu9dO4wn5k` +
    `zDABXRhfOmV3F3XjSPzp8cDcvVZ0he9H5iAi9Rk5z8iORFS7i8uN46scvVicWiIfo5` +
    `W5JDZKjRZvKom8smT/8R0e4fkLiZsHyrb0Y35t9N+WcAAAD//znjaR5IRQAA`)
  if err != nil {
  	panic(err)
  }
  container["templates/javascript.js"], err = decode(`` +
    `H4sICKJUslwA/2FtRjJZWE5qY21sd2RDNXFjdz09ALQ77XIbN5L/9RSdya0ztChSkp` +
    `3bHGU6ldhOna8Sx2Wldq/K5dodzTRJREOAATCitYn+3gPcI96TXHUDmAGGQ0pOdv3D` +
    `4gy6G91AfwI9N4WGWi1hDotGllYoma/NcgS/HgGUShpV46RWS355cXR3cUQIFV41wy` +
    `hiAfmiqA2OIMGaTsGslLawUBoqVTZrlHayRPuqRvr57e3rKhfViMljTFpUjrJG22h5` +
    `CJcnoplW1m7MbDo1tiiv1Q3qRa22k1Ktp780aIiqmf756dOnT788m67U9sSqkyXaE7` +
    `vCk6K0TVGfaJQVaqxOFkrak+0K5Ymw5kQqe1LhQkisToQ8KY1hfktjYo7RsTWGjVYb` +
    `1PY2EWArZKW2xP4Ltd40FqtLe1tjhyWbuh7R+FuP/peibjBviX2SmGdnX50/PZuWRV` +
    `02dWHxxOJHe7IVlV2dbIVdnfxc3BSm1GJjp+dnp2dfPvmPJ5+HHyzcEu1P+NH+lVBi` +
    `KYnQGGh9LsU/0Ik4nZICLMUNyjE0BqEsyhVWUBbypjC891doLWrYoF4ovS5kiQ4Pa4` +
    `NjKDUWFkHi1uMcAfAKOwLzIwBIOJr4kd9+46F8aGzeKY2j7/UmzxxANhpd+HlInO+K` +
    `tahvh+aKRgfni7FJKXLMsytV3WajMWSsSQsejSYslaSFJHjmxekFv8uz8ypjQA/E9G` +
    `kL/JrDMWSbj5DBccR3ILxGq0VJwgfsNRam0Ujs8uYxaa+UHnrCivFJBjsp68KY74Wx` +
    `k6Kqcn5yVlxUVVn3DGMMZW2crmC9g2o+zVdE+Hodz6zXD55Y41rdYDc3oa9EhSm2Q3` +
    `QCMbGMYLIOxazUdgiFORnEqIQprurBebCe+NEK5pCF31mLi/KBqFki0+tqyK/SSI70` +
    `mIozDE0jfWg/4zCCH+zjOBGGUdxYjHE0fXwEj8FshS1X5EK2W5RQicUCNUoLNwK35g` +
    `geT48oZPlnmAefRI8gizXO4KqxVkl4/ZLMROD2bV3c1sLYGWT0Jxv795dY6HI1g8zw` +
    `j/b9S6GxtErfziC70mprUGfxqv2FpopkIpzE/bcj7i1wmMxWhaxqnJEpM8YFD5H+50` +
    `T5GoR0QgUslsuv7dTrA4vpBDTwiNmZsi7TgMdy64M1zAHzaz8PhJXNrzv6AGVhHO4M` +
    `nEluYV3YciXkMibZCkEQLEJHl2mzytTJu1ZleIHM++sPyfCVxuK6e1HhomhqO4sgKP` +
    `yJqkJQdoXa9FnhsQFenLKnvARVfAArd0fd/7QkGyxFUUPBO2rgqjBYgZJgVwgGayxt` +
    `t1BhiTuNaNc4SzQr6+Qs1XpdyCr3qpaNIctGFzw1ygqKAHA0yG1H22lzRJjSNFaX+T` +
    `yBiLe/pyzeEih8ZOn61RMna95/vVBlY+K3d0OM0ss7Z+Y+bLy6QRfoYv9tbzc4hoXs` +
    `8kysJwGYfDlK1IH/gaE8EBiDS1Bp9jvOOyIka4tyxXh5piQpUDsvw4fc6x0aisA3Sl` +
    `VKuaDj3vS4Xgv53eUY1sXH7y4dc5xmkHPidyFcW84BsJ4IKVH/508/fN8G8uJjyL04` +
    `cgmULt0ggO1K1Aj5wsDzuZsLHj1KkpbccppmRpQlGHje0gtLtTBwModzJ51P4A08c9` +
    `QiIE/f7VnL1GNCJYXcIhR1rbagJMKmWKLbYoZmAXUjy8JyXOL1d4S8APajndQol3YF` +
    `z+GrT5bBW71VCmollzPOiaxPceifW16axdSixPx0DNGUJ3DWQUZ8Wt3gRWTytDbteD` +
    `d3vGsHZ3lCAmSPVljXYnORRervQrehQmDSpndzEpZzPBfHp48jRdORpkGehBjH9t3F` +
    `0ePpHoS8U0W27oEky3x7+4KypDfFGvPMkcjatFXQDw5PAuZwegECnpEETtQLEMfHYX` +
    `0cao71e/FhDGfnYzj7KrIlpxtiuUT9bseCHA1fMVXCbCj8OOukEsHbaWDOeUZPLNgj` +
    `EoxpnbKSSzC2WSzaybfmb0VV6TFsjTPt1LUGzC1eGVVeo3UVnx+MeC3X1Riqwhadg/` +
    `qM4nWI+0HnSVN/hRYa7ngxtmZC8+b/dfnjm4mxWsilWNwSoJtp1mHMAl6cwLd7ThJs` +
    `dbHZoAarXBHmmS0MFBKULGtRXhMcfizWmxpn5N03dXGbjSZ+FOZwZeWLEH54cAxnLr` +
    `3uRg7Ivy/d8e9DZOuwLrowMJ1CAQvcwhfLWl0VtfmCRLG6KK95LzZalWhImgrKRnMK` +
    `aCwVjmrhAOriFrUrX182umAjmcPZ5NRlastXdbExbOOn7btLpuCSRiIwg2xTNBR1/V` +
    `FIQwkk7+OYBdxgYaMXRshlnUAUslLrGIJ90yn9lPjR+seQPi5faa00Odr3H/ybkJ1+` +
    `J2qMBzQWFSUtl1gqWSWlzk1RN9iZ91qQ4JtCG3wtrRuFKfz7aWvKBstdiD8FCFJjgn` +
    `gGZ6dhCx1GdkpO1mAZIkcoJYUkpzVrR4N4bykozOHMP35fGNu9oj23K2FaQQzoRvKR` +
    `Ad6g5q1eojVQFjUVN/TylugrWbGebyraPbtCVmy/vYRVhf0Xkk8c+LfXE0rcbpxXYK` +
    `YclbdaLTWmZzq+MskzTzobJT6/tyF5UDBeQ8yzwMR9aEFZ27V3WvneWeAHTtf4J4fI` +
    `oMXPOi0PezSdgpClZlfu01GnKmLByk05PK2OVBYWQgqzQpdFtkSPeV+6pGCAE2PVpk` +
    `0ZyYf4hctGPpRtfeKSnf4p2023DiC0CwjTWLbHcHZ6StrlyZFNof1JrFE1Nk93b0yw` +
    `p6MusaQ6hE1s71lnl+uuCyEZNmt3Ym2W8BnV1EFgb6+TTWNW/qDTsTSdwnev//uHVz` +
    `Oolbo20Czr29bYNr4u989Wt8+B3rrY5EPmDAx9PGcix8AjF94gmeqzKw3T525lnOKl` +
    `iYmx+uIorsfS5dtx1bzrnqk2OTvt8p4wZlZiESX/7TrnWSgU7vbRm89jglSdOcwI72` +
    `4MX6Yb2YLtGujBXewth1v1riIM5J0akbY3iQvoYhsff+dZDOhm6Hae4m7w8ZAr3T6I` +
    `akT+aiWWq1osV844adB5oSBC2PDCcuSA1o2NfanC1uEefGwa+/hKYcn/5gDkfrvo5H` +
    `8ruXS/Aldsm3MOxKyKcSwM0TBipo2GA1PPEhZCUIynD3ExYY9j4S5js4RFv8Zu/f8e` +
    `r3/+b78yf3ejv/NOhGqbXwYNcwWxC+qz+A25tFAcW7Vc1kiR9y0BegpBueN0ImxJO9` +
    `ZlFX5/wkhU7boZ2XOGGekhH5yBk5Md4tHblrD3O10YhLWqEEqr6yOA95nfqGwMmdse` +
    `+uU2hd/xVmQfDjgfb1ovhWHjcnnCMWQv3VFOMHUP9kqmUK9kDBTFE4b40PkA551eCt` +
    `MuiLPQVzL4hDiGhNEY3lHo4L07TM37G478l2SdgyburRAWosYxFNoKY8dgheXH+qpZ` +
    `/y285KcxbJQRvG2xIWGe0RbQPNlowug0n6jRjzoivbTAvfQQjNQD4HeBAk2fjrPc/B` +
    `6OIXfUKHbFfMPXkD3bXunn7ylRS0aOIfuQwQyy9vYh8qnuwLwLi63Y8zmcnIV9bE99` +
    `64FjFhkPsVserjr8VN3STqy65NIoH/UqSIlbWuM3qurdHY4BpdW3Y5D6oRvb3982ga` +
    `SNZWoheks3HfrLCCWRGMipFmP+aHz3rqG9CfAAfa3gl4IMXVRwDFK3L39pUN9e8lkb` +
    `RdfPyS2+wLr+5rASHcT96ZB6TaegZH3rzn6dQnkdEQsQ9gvTncHfy+O/Wk0Pzv7yYf` +
    `l3Faffvp4hup338KXnOzQbJU2ibOrq51TF3MmhK9ZhDurq567+j8d8JuYjFo2kAQs5` +
    `hYkDFpUyXfho8622jh6MOTeoDS3BLD4y++HtS5LJqlLV4CHc8dlhYs6LtrSSUEyYE8` +
    `O/nWgh2/fVbG8TsuzCBfUaqYKvKwiAIfQlZXCbOkIbBSnwUWi0ChZi2WgE1bCKbim1` +
    `cgOswhstVHtDQkmZai8V3NW1O0WYzzkmU43lKkSaGIShbJle/tJg406Xns3P4f/+53` +
    `9BqnQiP8en0KZKjOgTuXtofNbR2GWlUo7UIAmfnQoDdlVYKJXWWNqvk8shJukPIHkr` +
    `+UU42ktAvUgQ7Tj/wRQsEtTDFm34nQS3x2Gjmy5JRLwPF8ntVOLIaWe7QDEGYVyEp1` +
    `9vKLtOnLf7R+ErwKUXH870nVoq+YVfzd6JAQh3MhhpanzD0dNarhKJ1+g6JIohUQDr` +
    `DOUV8Zu1IUxEqE76KytpFsIf8n6b+i2f6j1E5BCxPcnkKsdffNMcY8i6vYsp99Iydh` +
    `qO1OEzxX2xvb+cjnPaypTvlDcqFnY4a3/tWaR3PqUZZjSaq81IoncD/LejEROd7fEp` +
    `F0fVdXGN5FMojggJJWpbCMmJu4HcpeRwDF+PBnZdC3V2YNtpOBtUFy3U+WHE872ITw` +
    `4jPulr2mfhzCiUF+nWceoehNm9pg3c7h15clj9+CgfAT9u6kK6DK64UjcYgRCT0SP4` +
    `epHPebhEg99+i72XP/959ChFChZF0J33fDaH81EEmAqfWtzOCuwMnx8efpIMD6xGl2` +
    `CQq+zz4sP66az39p553L/ebX1E7+z8z/dS7At2mOL5l1/eS7G/knso3iVPAXeft9JC` +
    `UaFM81N2dNhtRQTP7yFIS/RJBJ/cQ/D0QeTuBtxjmqIVmw3Kih1ri3nXnVL4o3uO2J` +
    `ti2Ybw+FyfB2v/HAA2Gm+EaoyHcYRO3Fkz+JOfZOy4G+Nzg26COZzFitw1lWQLoR1Q` +
    `7JKi8ZiJPSCBjz3DQaxueMfomNtBTu/ndcCC2z6VYQzev2hkj5q4TP0dcosoK+BwrO` +
    `TaPt6qZ4dk2LeeB8XYh+SvBuLBe0MzQF+yZDCmNhSpk1idLkKrj8/nnXLvXYghrTm4` +
    `CEMIvADdwB8VPlD6RMFb1b1f6l1juEfqIQSWuhv4o1K3XD9Y7LujpJrtjgjzXs0SNY` +
    `tEjQv5/mrZtU69Q9PUtq2Z25Yq//6+qtgBg2borqRzh+G/wpLrjFn/0rhz2bSnLMhA` +
    `C0tya5NMBLVYC+tK23AsMFkXHx3T3anrXX+WWLbh655kUqksNxYuVCOrbIfsLslPKh` +
    `CHyj83PlR/uXkeUn3tS4iN/qaqsjT/Dx2/vgV1oTSzZqCoNRbVbagne6cfwRiTalLI` +
    `sm4qNK6iHPXzXl9qmJVq6opbs6oKijCzVeAKGRAWFlqtk2m/Hi4Kh7v4rIzMdOcC8R` +
    `CRnU6QrKiqbAy9EvnuIk5PevZyOEXZMc591lmFzsvvKfOJzDMd2LHPvsavCvO20CiT` +
    `CrU9I06pOeUaPDXu8NwpcFbV79TWUc56AOHs2KdhBHKRWFe6OHtK4JazN8UaB85oIx` +
    `N0c7hCCL5O3s0gm0yydpkB3vcpjyH7vKq/db2s/bumVGkG+LzZl9K0zbERN7EK7SZw` +
    `+fAy1Gy0o0Tl+jowqHOxk0oQHu6l/IFwQB7vdVvh0CgttQmdezJaCtnugv4ePdzVRI` +
    `oCIjHkdXQC011u/F6V6xYhpvJHlOn3qlOYL62ckqd7I4FXqhjnQV5zv9/c5zn3sHsw` +
    `I/td0e/3xL8/FgE/OQb+U6Pg/q24+9fvai8ephv6qY5qb8Z6t5u73sWNU01dvcOFRr` +
    `Pq2rdpSG1Q/hWvLrkzdqBz1zjlghYm9+22oelVSSKRdM3ftPHT99n8+PbVm6BLOy1C` +
    `3KAYMxj3hJd87DfRWKuiyl1/8ELpEkF7aayCJVqoC4vGwsqua0BbHkH3XYJns6xVet` +
    `23y+eL73+8fBUYdaI3de0ek0yX7EcikwnN4KAxvHQ3C09Dx17bLj5qKSW70TWpR71c` +
    `yb6M4alroIrlWaMx7pRlSKLeNadrS+YeUYKa8N1gjyD2O7Iicu7OE2+sV7Suz9fbKJ` +
    `kdTIFbc2DqbrcqhUZ+YWGr9DUUBvDjBkuqRHIa4Usu/+FTuNEr6pqN2Io1ulZlJrSj` +
    `ln6/XPviBffH+E5fyKjqcdGFh/2dAv0NZwg+2Lgv6gK6u8wIFwQOwn1FdwgiFMTdd3` +
    `Ebd50zzPCmvc15H/E5SDnlLgh3j0gpww9EGpCBd3GvEEy3P8n9Qjx4YxIpHoy1K0av` +
    `ESwWKOoq69rR+o1jn9CRFvef0cOBo4S4ew3cUg9AO+ftP5zY+RIqI3dIsWXHVL13do` +
    `ni1mSjiWszJTEpRLtAyV/XSRBy01hYCKwr93Ws+x7DzepMSfyD1t5/gMJs7oIpLVBa` +
    `9tTlqpDLFOMI0iDjC7m019e/nE45xIcobJVvE3f+4ejgB5XYff4XhfHwSaf/VPLO6Z` +
    `S7zRrDwa66Q710A41xw8kog40hw6R9bqj77jB+FTfp+YYTSvWaq7Ww4du/ofQlcuL9` +
    `/CR8Gdv/NtCpTPDzR7AzHvb5nz1P7GRb53ivF6NtrLGQ/Q1jXniKo+7uzq/8PaudLL` +
    `M3QiX5a8hU5uisgA2MzzGhABfbXUMFhT6j1gj+c2MDOU5gOYEXK63WOALTGMr0QDU6` +
    `UAp99VFK0H1Y4ZzJvvuAZe/INFrf8BEwhdj422nfU/66yrP4NX/sPnJhHtXi6P8DAA` +
    `D//zdyZr9qRAAA`)
  if err != nil {
  	panic(err)
  }
  container["templates/style.css"], err = decode(`` +
    `H4sICD9RslwA/2MzUjViR1V1WTNOegCsOetu47jV//0U/LTYD5Ng7Fx20p0oKNA2nQ` +
    `IFOttgUhQFiv1BS0c2G4pUScqOd5F3L3iTSVqUnWSx2EzIc78fMRfn6C9//dfXLyWi` +
    `nD/1HeolND1Ff2ihJhj9twdBQKLzi9lsyesd+nWG0J5mCUqBQA1nCkmgUCnCmUE2WA` +
    `Ywb3BL6K5ExTe+5Iqjr5zx4iNqOeOywxXcnV/MDlDJaq2A97L4iKpeSLKBu5nHkuQX` +
    `KNH15+75boZQi8WKsBJ9sscO1zVhqxJd2nPFKRcl2mDxYT5vuICV4D2rzzRsiasne/` +
    `QI+5uzu9nLbObc8KElbL4ltVqX6Mfffe6ez4wjBo9oa0Nm30Gj/7OWjWr9orkT1vXq` +
    `32rXwe8LBc+q+PljdMf6dgkive2wlFsu6uJnI9updXV5+b2xiYsaRImuumckOSV1xn` +
    `SDNhe4Jr0cnLfkz1pP4z+HseQGMt/C8omo+QRGy3+ZAAc+uILWOPfiHFW8bTlDUu2o` +
    `zbLFkqyMWSH+tTbtZTZbLDmt99At6CzRgmht4TpafXtAf+npZYspTcGXix9vnEYLUn` +
    `Fm4YTSEjHO4C7wsUZDaO3kuiPfgGgo35ZoTeoamL6riewo3pVoSXn1pG+kEvwJMolo` +
    `gT7DPn8f3FHC4D9cJ7hB937QroXalyOua4QtgnM7+n8kQSG1hiDLkclHnyHXb8kQX2` +
    `1XUbXNl1wp3jqs0cqqbs687s/fQHac6aL2BsgtUdWasJVuKVsApuu2bxn60PIloXCG` +
    `MKuR4Fv0oQb5pHh3Zo0ZHN1QsHlG4XleE2F7Uen4aAimZMXmREErS1QBUyCsRmtSW0` +
    `U6LomlwkvJaa8A/R9pOy4UZkqzULwr0fz29va2e05AFBo1DnuZzZa9Ui6xhv50HTv0` +
    `+rACeyZB3b03YpO5q7vO3Dhm75KkOG4t5kREO0G464cn9R5r8lxYTYyag4/KtS4nw4` +
    `13uCJqp3W4Oa1bOxYNr3r5PhY1kXhJXYGlXKKRUn3KjJLq+pQRMlIOhzks+HaYGZrg` +
    `3taGL366xTvpC+Z1VeELkm8TbrrUTmPllIvzOuC7aLANxgaEIhWmPt8U7yxiBa4pJ7` +
    `LsiGgxYWgliOleC3OKcDVIK6D/nStoO4oVzK2BtgrQVSN8NcRYWACWpfF5sTCSvgjB` +
    `BVoU4d09Z0pwOnILTKFFcUqYB71PVTRcsyje8V4ht01kTRg3ImfGqCE+yfZcfvVO04` +
    `LKPfs06b9rmqvmqrkbyL24EQYOFONqFTK44NroxTkCViPexEnhs8RLjJIlVOPUnMG9` +
    `4vaHDshwms6fSgn6TwJbpH955Gw18UvxLpIHincgUPDrwhy+8hqGXwpXW15E4lp/v8` +
    `cy0kaw9P0e6wvFnXR9MUF0oGDmfLKjIxonN/bODmMJtCl1THOzyIv9cy+w+bYYketh` +
    `h4JPmG45dbxg5+ARsRayxzTeH8HT9yPZmyar2YZ9sIYMjsL3mvQ9LVf/RqRKcvERsK` +
    `jWyeWfBN9KKMIF4ge/Moe8clmmYTG2FZPDt9CYwuqQo7DQxM8H/vROdlGN3BxE+vV9` +
    `Iv6Rc35YvvpnoMuj4l1wfBCwIbyXwdVP8KyC4zdo+QaCi3sKmJkQXZwfDX5Wh4M2k9` +
    `GksDPq/CKpFMMyWy36Z1pbxvIsxeN+SzhUKS/HYaSUxodZKg1NKZybszQWnlKZWOSJ` +
    `DHgkV5O09NlqOkuUq0OveUemTieplnDPmezb/Uj5Bh1gNRwfCVvRAIpZzdsiboieRa` +
    `YvOnBM48RkSCw0pnCaZCgsNJFhlM3KMFBLofhqReHvNppmoNRQcTtx9CdaDUJ/oo9E` +
    `Mwqbj6WZsitBhlAOY3dYoN0C6BvtJz+jXhVrv7hMzwFcKbIBrcI/iKKAjpyLlOqPQu` +
    `muf/TikJAu+xYdOQe9yK8de4wHwVcCpETRDuDSL7UjiXMCzq8K4VoQriQHBmcFWPi7` +
    `JBjX5AVo8Hv4D47MivAYr3heHBc7JrUmG/t2MP1pvq+Hy4Xb7vxzh3vQmFLoRZcfRl` +
    `LXGmEII6qDpktQX/mv3zd9HuTbqGbttzxpTCbc/HIPlBbBQ0j0eHb8UzJU+XQd367l` +
    `uJ7+S9FrEzxx+RxxL/BhZO2D6suebDHIHHt5OSnbbOPFyL5JcLFLQjzcvynOkyEeWH` +
    `sP7i/eF+MDnU9S8h1qTgc5UueVkY5of5NwLw7sSVpXCk+I/HPTKAVQi64zRKfQA14R` +
    `Zr89A8NdyIYXWt+c3IUvjDFR/v41Iz2c5v7J3bxFXx971fLS7Bz0p2FcxkhumMXHFM` +
    `eMo+h0ygPYxTlyD/f2GSt2z6Th/n/vgMlONpiKckZF+gd7Q9jQ9mwywRv2htx8TaRn` +
    `2Oy3g6N8xraACHgKl9wzSgpP9wkzY1MBUmGhwox0k9g/AF+co55tQJCGNGCX4IWuKH` +
    `L4zuSurbLu8Nt3a8fYNw13/MKU2BWR6ExbiaGvrN/pMo1ZPwjSYrErxmCPUHFWY6/y` +
    `kTkyYtCxWttXQuigjC8M7K2dLO8O33xtDfpT0rX8tSux+JjimPKJTg5j6Pw/4RZQdC` +
    `qS18LP7s/Ir+x0B27MOueHRqDrRph/j3c8/4o/7qzUK4cOyPh12ienn4KWGmuYZFIE` +
    `vIvwx5tnDE0oxtpkBIzxcw0xhRuqmmyC5lQytZ5Xa0LrD7ABdvbRwN1emwIznzj+T6` +
    `jTnNNdaVrS2GJ1+BfLKaG8rrPWaFjOmFP4nmrLGO6IKTfD/g+80fX2vwAAAP//pZNm` +
    `H9AkAAA=`)
  if err != nil {
  	panic(err)
  }
  container["templates/theme-default.css"], err = decode(`` +
    `H4sICNOasVwA/2RHaGxiV1V0WkdWbVlYVnNkQzVqYzNNPQBcikEOgjAURPc9xSTdkZ` +
    `SqqGnKacpvESL4SVvThfHuBiQunLd7b2xkzngJQFcgXsbg0UeeMeS8JKt1KaUuTaKB` +
    `eUo18aynsdOlUXkIc1Ax+JpSQqWFAJTqHN1vkZ8PbyFDv9JuoecYfuGw7RvoaCGNN2` +
    `RoFycLeTUruzj/Py4W0jlnnGnF+xMAAP//Q68dl8MAAAA=`)
  if err != nil {
  	panic(err)
  }
  container["templates/theme-juri.css"], err = decode(`` +
    `H4sICNOasVwA/2RHaGxiV1V0YW5WeWFTNWpjM009ADzMQQ6DIBCF4T2nmMSdCaJVUf` +
    `E0OkA11Y4BGhZN795oSWf5f5OnHFGANwMQOSAdq9FgHe2whHB4JUSMsYi1x4Vo8wXS` +
    `LrZ1FrHmYTG74c7oAr2HXDAGwPk84ePu6PXUCrJOo+7b8QJLzvyhvO4HWCnIZIlGzi` +
    `ncFGT9oJuhSqE5P5oB5ZRCe45LtJ0d2ecbAAD//9Kzz8TDAAAA`)
  if err != nil {
  	panic(err)
  }
}

func Content(filename string) (*[]byte, error) {
  if file, ok := container[filename]; ok {
    return file.content, nil
  }
  return nil, fmt.Errorf("file2go %s not found", filename)
}

func ContentMust(filename string) *[]byte {
	content, err := Content(filename)
	if err != nil {
		panic(err)
	}
	return content
}

func ModTime(filename string) (*time.Time, error) {
  if file, ok := container[filename]; ok {
    return file.modTime, nil
  }
  return nil, fmt.Errorf("file2go %s not found", filename)
}

func ModTimeMust(filename string) *time.Time {
	modTime, err := ModTime(filename)
	if err != nil {
		panic(err)
	}
	return modTime
}

// eof