// Code generated by "file2go -output templates/files.go templates/index.html templates/javascript.js templates/style.css templates/theme-default.css templates/theme-juri.css"; DO NOT EDIT.

// Encoded files:
// → templates/index.html
// → templates/javascript.js
// → templates/style.css
// → templates/theme-default.css
// → templates/theme-juri.css

package templates

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io/ioutil"
	"time"
)

// file stores name, content and modTime of the decoded string
type file struct {
	content *[]byte
	modTime *time.Time
}

var container map[string]*file

// Init populates *file with data decoded from base64Encoded string
func decode(base64Encoded string) (*file, error) {
  gzipEncoded, err := base64.StdEncoding.DecodeString(base64Encoded)
	if err != nil {
		return nil, fmt.Errorf("failed to decode data(BASE64): %s", err)
	}

	var buf bytes.Buffer
	_, err = buf.Write(gzipEncoded)
	if err != nil {
		return nil, fmt.Errorf("failed buffer decode data: %s", err)
	}

	zr, err := gzip.NewReader(&buf)
	if err != nil {
		return nil, fmt.Errorf("failed to create reader from buffer: %s", err)
	}
	defer zr.Close()

  decoded, err := ioutil.ReadAll(zr)
	if err != nil {
		return nil, fmt.Errorf("failed to decode data(GZIP): %s", err)
	}

	return &file{
		content: &decoded,
		modTime: &zr.ModTime,
	}, nil
}

func init() {
  container = make(map[string]*file)
  var err error
  
  container["templates/index.html"], err = decode(`` +
    `H4sICJCosFwA/2FXNWtaWGd1YUhSdGJBPT0A7Ftfc+O2EX/Pp9iwD20mIkWQov54TM` +
    `3c+Zxc2nPini+XtJ0+QCQkIUcCDABJVjL57h0QlARK1D+f7UszmcmcQmJ3sdj97QLY` +
    `NS8/f/Xd1bt/3V7DVOXZ8LNL/QMZZpPYIcwZfgZwOSU41f8DcJkThSGZYiGJip2ZGr` +
    `t9xx5iOCexk/MRzYi7ICMXF4Wb4AKPMuJAwpkiTMXOksgGtjkli4ILZREuaKqmcUrm` +
    `NCFu+dACyqiiOHNlgjMSo1YpB0BOBWUfXMXdMVUx46sJPndd+IozBS8WRPKcwJgLKD` +
    `K8bEGBZ5IAUYkHo5lSnEnXtbm++fHm+gJy/IHAks8E8AUDmnAmYUHVFO7ef92ClLO/` +
    `KhgRyPAvS1jzZ5R9AEGy2JFqmRE5JUQ5laZTQcaxM1WqkBft9kwSb8yZwkY9L+F5W5` +
    `CMYElkex55fQ+1EynbOMu8RMqVEMoUmQiqlrEjpzjsd9zI5y+/f32dz4t/fomyHzrL` +
    `qHf77qt8eoV/LPybN1Ha9W/QTW/2OviS/fw9nf/yDRlNWfrd3/8R9DGbj1eSE8Gl5I` +
    `JOKIsdzDhb5ny29lfjwqollW9KJU8gVlOSE/enmaA2h6IqI8MfyAhubq8u2+ZRg7C9` +
    `QuHliKdLy0sFlhIKLHBOFBESxoLnkGPKvAkHxWFK05QwoKyYKRhTkqVy46aUziHJsJ` +
    `SxM6UpqbQAuDTkNI2dhXRALQsSO4rcKwfmOJuR2Pn1V28hf/ttpXc7pfPhZxut7t5/` +
    `XUFFz2Xey/kEsKDYNSrFjhIz4sCYJzOpAyR2xjiTxIHSWLGTUqlxesE4szSTy3zEs1` +
    `I1PYGbUJHo4NLR85Lfx44PPgT6vzUPwKWhguQ+dpDvQLI0vyJ2+s7wsm2G13O0zSR7` +
    `59RqHZuxwGoKaezcQNgK4T2gHrwB1GshH/6tp9Tjp0+oI/XYjIIkCkzGcDoOTAmdTF` +
    `XsoI4D9+WbZeyEempNeDIfCpoZj+rMDFxONFKwMdKg0UY1aoQsm/YfaFNB5qfrh/rW` +
    `jOi4hoMNefAw/aTixTku729c1y891y0d1z3bcZJgkUzPME3Y6kHYQr0Gg9hxF5q465` +
    `VhF3nRAwIvo/IMTGmQvIYOvIcQwoPe6paUqK9JDwOvNahEDmBwRORgJfIwIWqhqJKJ` +
    `IkDREaklcSl2l/So/cY8S4k41YI5BK0AphBBBmEr8CKYQjlxH15D8JCQ44vjs09ACc` +
    `zkmItcbxGYyQwr8je/5QZfWHQrPSVPacFTemE2KSwSZ/NO485FkdcJg8iPHIsZLKJl` +
    `7ARezw/DCEUWszAxtHkuo6lZhlRY6JxpkROWxo5fpy996KLAQwO/O0CtnteLAtTrde` +
    `AFdFtd0AZB4KKBFwVBGPZaPc8fhJ1+p7cZrgl0A9/rDvot1/dQLwx81AtrgkJv0On7` +
    `fdRyQw8hHwXhPkEDY6ROr9VkC16sN+wam+UqwZX2k4u09l/songrXXm9aJOwdDbQKW` +
    `ugf5exEzVsU+3JyTgbYfaoB4LtEPR1CHb2wr/hkMKZnOVHd/DTAB163Z7f7XUD2xU1` +
    `NKPQ64ZRr9s/B80nYLkygDdAQWfgoxbqe91+JxpY8LUEInB9r4MGKOqGoab1g2jgox` +
    `o+vWjQ6aOB3lC9XjQIUNSIz8hDUaTDpR8EwSDsWDIGK2u01quGDNxuy4df7OU1IDX0` +
    `G2BqZT/ke1GrW6Y9F52d7CqfuyktT7fpn87/4zi/TulFLeRF5eF+5wy0gck+nAhSEH` +
    `z0VGPlq24tXXUa01Xt3KWTqsURHj56HdbzZDg/tcKP6QJJ2eSsO2Sv0i84sCJLO9Tq` +
    `QkdvwRHMAQXnXwVK/R5i+sdV9FFhj1nK83OOojoUu5BBR2/AU+gePCgH5qDc19e1iv` +
    `VssxsVz0vgT6TrQyxfPc0ndmEm4zgFPhPwE55jmQhaqE05qHqWIomdzbj3k9STmAdb` +
    `Vo4pg4mgaWNBSY9uyjYr+mshuICcSIknZFOJqli16ddUji3J8I24SIkgKZhqVVV2sg` +
    `RYHFecKcEz20MWRaJEdsUZI4minNXvFaYYWiqTGJLaeFXKqgRppDgn1bXqMgAuZ5LA` +
    `fUbZhwtTEvyLdUkaXrZnkmxNa5xpvzCq2qfkTSGuZlWS4UJqDFvrvzbv1lZ1hv5FgG` +
    `pGtSSkM4FLW9kiXlUvLRnBBQr2ydAsd5xN1jLWDl2P1NanUZPMhCBMZUvAiaJzApKz` +
    `iQWc2gRlwXQt3TBose/K98PyZ0s5ixsLVRYYdthfmIGh+T0gIBvN8ib+8v2w/DnC/W` +
    `KvDtbo8D/W03+3rb2NAW1FuaAqmcKIqAUhDMpmg3RqZtwOj/eULGDE798SWXAm6bwO` +
    `4SbyN6VyddCWWYdKBVSCmhJIyRjPMlUm0y031mPPFHtW2besB5s8vBNIjxKOewOy1K` +
    `MpHhsisikm1x45bLs7U3bbbw/ZRPDkq1/N+uTrfyn4Ykcxe/2jkkA8twGqmtljGqAx` +
    `Qnd6codi8zbDSyLOiE7DoP89YGHT1yhzaOw00D65rUsFHmDpvSsSxNRdqjW9NY//76` +
    `uq2kErR5mnpj7ecy2w1OBpU4QB8J3ixaEUWfZMKrs00D59tiznfAZD3Aoyp5u+dJMx` +
    `ihXJGijNPE8PD0Hmz2KUb8n9zvHDMojpSFbGaKB9ckOUCjzpRrJllhuekkObhPVnHm` +
    `PKUsD6gKiIgAVeguKg+GSSEVBTKptO3Fszva2u9JWF3xlmc4uGnO/kpVqiLqlemSPe` +
    `J01mVWHio9zUtLZrVi7tk6xmU8N4DPQdg0FV0NyCQfn2KAxKqt8FDMwqHhMGpcRPBI` +
    `Ot4u0Zy9p2ebPT76oSat3ppnDZ5PStfbukW7m9YVWPZJ39+7ZRv9ksjYbZ5/Gmhe3x` +
    `+bOt65jfz1rgqYi4WvU865Co2mLHMVERfkJQrLq2j46KSvCng8VOb/LxcLH3hXksjx` +
    `yEpcDHYFVp138lCPZ1uCwbvd+uE63rZXNKFrcVmbNd+iVM7V6IV5fcbE+dajV2zZSg` +
    `RMKEw5QIsn32OfE2X6pPmBJLUCQvMqwILGiWwYjo8YSkQJnida2al2ortlyvVXI2ec` +
    `sX22XxPfuzpq7MfeBMuBXMJMsORmmRNdYJngHDB27VH4fbsy3wluR8x4rPYoMRZs8R` +
    `urs4uhWUPyqIBOVovVVoc5rrRwE/z8hscxIsBOXOED2VJ7UawY4aOU3TjDRqEjylJu` +
    `GOJiOuFM8bNQkfy7VXu8qt09Bq/F2tzSKPNVgaJGy1OeTxJkuTkFq7RR5rtOyT0KTL` +
    `qc2WRqmvtltlemD9chhchNtdttM2FVOLP7IjVn2Ehv1wz/aw6S285PdWZ+7e3lqads` +
    `tKHevTgt1+zuZDAkP9ztRgrA8KzMcvjc2N2kl6NsqpWjVJLulKzzGWMMZWm4IOz7i6` +
    `bhR7S+Qs24BAb7Z0qx1ZX7YoGR5wNKj4tw4Gjf40pL+7TV+KF2na4IQim8n9LvgzGf` +
    `1hkpGdb15RQRLFLYSelnLSFd8be70H4m7NABXRmbHXOPHHxFalxu4fmhwmvBU0x6Kh` +
    `t2ZFWJqt2qE7QbbpR54cZoe0uSMJZ+lxfZ4j4pNTrGg8tls/K/BK1W9xvskHa2+Xb4` +
    `f638u2Jn7I7XX912yNd9nNp25t85Ge+XCv/LD0fwEAAP//9dTUl2k6AAA=`)
  if err != nil {
  	panic(err)
  }
  container["templates/javascript.js"], err = decode(`` +
    `H4sICK2ysFwA/2FtRjJZWE5qY21sd2RDNXFjdz09ALx773IbN5L4dz1FZ3671jBikb` +
    `L8y94VZW4qayuVbCWOK3LVXpXLtQE5TRLREGAAjGitl1/vAe4R70muGn9mAHBIUclm` +
    `+UEiMd2NBvp/A7PlopLbEauqm3sU5juuDQpUZVFLVhVDWDRibrgUUOK9GcCnM4DxGP` +
    `RKKgMLqaCS82aNwoyWaG5qpK9/efi2OgO4ZwoQphEFXjkCAApNo8QhZAK8PgPYXbvZ` +
    `VlhvUGkwEpBpXj/Q/NvxilcIUgEKNqtxXHFN/wEdIe1w8SNbb2qcwPtiU7OH4sNozT` +
    `Yl3q7kdhCY/IYI9TOK9H00r5nWtDW0T2VBExcdh5YGETyRhsK1vMd+Mq/9Io5R8gut` +
    `YApF+F6kZG7Ek6gEbI++1X9nVaVgClgWW10MRvesbvCa9lMhq2Ch5BpWvKpQABebxs` +
    `CCY1216JYSqQmKChjM5XrNRAVSgFkhbHGm5fwOjYcPj2Nu5+tqCBUzLDDNF1B+ttXh` +
    `Z6tCC1ZrvLZjO/t3PIa5FFrWOKrlsjy/vXnzegLncAF/vf3hzUgbxcWSLx7K9cNftR` +
    `SDgcWKUT5BOzvsBo72Vo9oMWVG41NgftLhTAKmR/WMGtVgt83jMWwV22xQkVY3Gttd` +
    `YBqYACnmNZ/fZTqMpVPiwcg/hynMjHjlUP3DITwPmt09O765YS9biL1t9txFqH7Pky` +
    `UxWOAWzpe1nLFan9PSjGLzOyv2jZJz1LS6CuaNUigMaMMMglw4gJo9oPKsL183illm` +
    `pvB8dBk0e3lTs422WnsZjd5aOlPPNRGaQLFhjcZi2Mq3WePE6cvQr3qDzCRDmotlnU` +
    `ExUcl1CiXFcgKX7ofAj8YPxCa4vFFKKg1TeP+hHXtbs4eaa/M1rzF9RGZF5niLcykq` +
    `nYjLGl+QCAGvOe3KhimN3wrjnsMY/nTphUIwGuf7MH/sYMieCOYlPL/spO2wissCLu` +
    `h7bFeEQBOnCI6V4pmY6c21+0u4ay48LmCtMUE+hJ3ixXpJYBdQTCKuQmgwK67brdKg` +
    `GqEpLOE9KqtoSzQa5qwmR0eDD0RAispa3aYirTEr9GbmVYvwqqB9XCykWrvvXk/Z3P` +
    `B7tFrgpecovVVyqUjDpz2WhGXh6ReDERcC1Tfvvv8Oprnky6DhXk5YFoGXxxCDxUQS` +
    `doYRQh9Mp+C+wrNnnSm97IytE814DFzMlQ2ldtXaayZfWPviYmk3Skhy/oLrFVYetS` +
    `V8MYXnuQq1GtmuE/4IV8RZpBfk56zx7oXeWc3FXTFIlOsoVgi2KaIzYzTv+BplY8pU` +
    `gEPS0stBGhQp5bA2nYh3rZdxhFrrJXxGAbVbi3cEo02jVxY8C1Zff/tf399MoJbyTk` +
    `OzrB8iE960wdmPGBWNBMqU0BzwFmBRLqaW1gW4MN7auiX/cqZg/GdPctdp3ZpxYSfI` +
    `1E4b5WEo5Ung7F4l+9oXUaxeetZrFEuzgj/Hwu8Wpld8YcrBdfuglUFZFO3w7iDd6T` +
    `QhS/mWw85wd0P4IhK42+sW+pA5H9qgIB6bVmb7EyuU0zky0CZ1GXFk7hSEcoQQa6CU` +
    `qv1BiZ2RsOLLVc2XK2et9DB4KBf9TKQSzPhIBq2jC7+9kwo/fdwcttkAhcz2lw2N4Z` +
    `eLne0vKZbhe+DUG+3UJhBeh9PIHWJ3wmIbu3uZmWRMhRCeshOieMayjdt9rE4ypq/7` +
    `csufYhGWf/hkud4NfvLqpbfczFdQ2uFOEedMY0hOJukYueZJq69GLpc1Us7wloA9nc` +
    `4a4hQpiDF62mVKXqbds5lCdnedzK2N3ERz08/ywFw+8dqbJhmPpmhdXRdwYS0rhLlR` +
    `tX32vvCiLYZQOHHSNydCO2bF5ou3g74uinj2yYfY+p27cnnQBRS+0CqiNTqDbSFcDR` +
    `X5mTTa7MH3UUzn3KMY+dzW74RKPHEJWA/BPGxwCAsRxxus9yr3QWvI+0V9IDF02Wxw` +
    `9rXGCMkYNl9ZvPJcCiqc2pkTRhfcvCMvk/O55mKhh7BmHxe6c2MrYzZ6Mh4vuVk1s9` +
    `FcrsesokxKjr92hEY/6/GslrPxmmmDarzgxrjhNv4teD5dJ2GXRWv+D+z32JBVecV3` +
    `LkZQUol158F97Bj0I2E9mtcchfkbrzrkaCiS/hHE8fNLi1umwzCm5Pq3kuhbzaM0v0` +
    `GKHemC3NiJqPv8uPG9NWE90uahxtFCCnPL/0He/3tmVqM1+1i6L1yctCr4HK6GLV1w` +
    `1c7XtWSmdNo3GCZjpJiDAVzA+ebjeWuE113G+4rVNZXeSAFVoxm1kcbqVecQu7DMqs` +
    `o6NAdiK95V24OytDxKMMbSddyGcO5QzoeBfEt9H1Qq2grrgOcrJpb7WDuffHmvkCrx` +
    `Qipylgo4uelr4PASWqBr4BcXnbovuCmxfs8/7HsH9yikebYZZOszjYZqo6jx1pZuWF` +
    `ufkeY8X9kC6pYSmUN5j89YYMFrHAJThmszBMON/VnPmvXfw6D9laUVWBYUXGiKYjCy` +
    `aDQVr7F97tCz3M0NtjAWMQOxYyEdeByG5OGoUmEQc57UWlL4rqZfjkfhC+DmXEPFFw` +
    `tUKMxZHFgKC/uVX8h1VwYl42ly+p5sNGaDAtMHX4H3l1Uuj+2Za3cWz5dvJY1dZ0ls` +
    `JV3Fbm2Mykej+HJJtfrCIFU8xlBhSSZko6bTJR9pym63h/D8T0P4///pGYkAglgdxI` +
    `s+CMfsIwBf9dEhI/OaLHBL2vVG7rWOh4DCqIchCHW6NudK3fYfSK8tva4KFG7O0FaW` +
    `AomL0qgmRHSCONpw9iD7hmGHOWVzvIILECoa/qVB9XCLNc4NVWD/j7LjV1jXvYoWW9` +
    `JR7HfH7ef4zMf17vexvcc56tuQ1r/+Cgt8wowHTyqCtf6Oknx9Wp8qKzztz8wIT2LS` +
    `WeZVbsCnKNuvQf0qdhu/AvUA2z5OEn7aHvDt8h9Rb6TQqZORs59z1+JydHfyAFOQs5` +
    `+vz/KULYVq2zW+TKVnWZVaFmg7F0MouFjIYjDpacVEpwHQX1u6qB9Vl0ndTPgjbb8H` +
    `lnxY2fh2+X6Dhcy2whoNgqwrCIBdVZp02kO6SLlPC0L1KNWtRsKCLxuFIBtr9FsEge` +
    `6BdQobxSXMGmOk0CDJ/ZpJTIUv/DHGdGrLZnj2zLeIaXLg2uZHz57BLw02Lkt8Ob2C` +
    `//3v/wEh06n8LE+jLqSxMxDBR6l81lHZZ6eSjtgBIj6Gcw1mxQzMpVI4N18m1YFxZH` +
    `1ab0VrB0KumQH7pUGkA/Yf5oDRkj00a5PIURe+rGPpJk27BT4s87gizGMzCXsIG6m5` +
    `bYoB1y5ZpW9vqNrN4rH7UKAJkCn1YOBOY6U499ubnSMAd0ejiRJ3rc0elbbtZOJ5ED` +
    `MSpQdRgtJZ0g1xXrQZCk+Q3U7MjKCZiEKfT9vUb+0J5KnL9+QOH1p3nyxrsQGsk3I6` +
    `5V4zJp7r6OFokO3IyFt7jlsOUsp7CyO558vq41XgR9PD6VmGtb+jP9r87NCpbjJv4X` +
    `K5YpiM9qwpep6w09mxT8TrB1izOyQvRWGGC5ijMowL26PTULreG1zAl4NeZVFcPj+i` +
    `LfS4OKBnisur46hXR1BfHEd9sa+kn4XzsNBP7NNWYvhYHpXBXj0B9sXjsL2Kba9SIO` +
    `DHTc2EqwvYTN5jAkQLTAbAt57tiZTt78I//xl7Un9S9exZjhaMmeA7f/5yCleDBDTf` +
    `vmgDT7D3aAufAv3iFOjebexyHXLz+8z7fOVysjf+tMk9RpwIZVM8v/qPI5OcuB+PTX` +
    `L1xRdHJjlRRAcn2R2S/ONOjD4FiSBzY3acuKYK6bhPg9yvJdv3G1kg6fw2Fl4cikF2` +
    `RiguD9HPCO4OBJI0OWabDYrK1iAR/i767m/5VVxvmAndfYFb8H1+34ocDGyeEpoyvq` +
    `eJBKPD7S2brmjTLBZnZ1lC3/X1yixFO14faGRqvvoRdVObqErAMn3yWBXggInrpjZx` +
    `4prWQEubQE3y2zjxdpErtSswqhFzZrBKnUV0Dp1MCjVfc+MSehKwpbFmH90CdCycNF` +
    `2N19mXtR5OWfsTUgfRlwm6mZI8sD/CHgquWn1VVUWeU4TLl65ssA3nhd1WVlP9/xAS` +
    `3L1KzZ/apcktF/O6qVC7BDd31F0Ko1eyqSuq2FhVAQuzGwkuTQJu3F3FeOov88j8uC` +
    `OMTY8QOuPuP2c6mfDe/bqCVfbWbZ7Y765T688M47AH+Le5gB67rriyWvNACU9q2Omj` +
    `/gsU4DNmdw81wXD6e6D7CUkfs6jqH+X2LVMoTEa47X9aG9xYkAzieBMVDuX0Vf2Grf` +
    `Ou5uFZ9tH/ouRWn1ISFDMHGYexaKJ2ND6A29/+fv2xdBLQkyrqUITm2beFHpmHjW1m` +
    `dDwUfcXVrxF6n+DJDfOjdeYhwT5NuG5xLb+R4dEnzzS9f2Zr7ENNYU/XkJ67+ukndz` +
    `ZBdywne7nM7kgu0pded2KLg8zp8tLq95GXVr19bbftcXf7ESp9JxVep7vzisc46Tmx` +
    `8Ix05xbh0xlNd4oRAe+dZZwy99GzifBxZxT7U+2fVBxViBM5OaF+3v37pPy0U4zw8T` +
    `Ycn2mET7aUflewcJ1NRybtZ8ZgIaM7MTFrl/kEH2HhTywNT0xe4BFnkqY2p8WmXX9J` +
    `sYtvKMkNir/h7Na+bNKbrG21y4+hBSv9yy/dex9SEJ3DW5dcivnh7c2bTgY9N06xLO` +
    `ZSCJzT0o5s8y6af17L7ADoMAOvvvvh9qbjwC2wqeswEJUuQoJnxar7oxz2cLZGrdny` +
    `CG/ZKZZ7f8beySG4kT07GuzTxb2LtwnVbhEtkYiG/ZPIvnSJsE+BpVjIeXbn1ia40a` +
    `Vbhb80qA0wWCjUK3BnE8A0aLlGcIFTaShxBMsRvFopucYB6EaTsoJsVKC0CW8FdNei` +
    `uxcWzpz8vPm4KvpHN3UxhCJ6Oyy9oe4X5O6Ey02vbve88HYdHrg3Y6CgsnWNAeYb3p` +
    `rYe9cwHILtatP/jcJ7LhsdgP11x/RO4MadHPQyY+fs48YzMYSE4Scx425WZrzQhAeY` +
    `Sdfdvzf/Umayu7wJW8n94PyKcX4J+Im3jNMbxfSzPN6LSe8lg9vFAzi77t2vz2ng88` +
    `DMDM12i6K7OgH3HLdW2z8f+x2xI+3F7/HYDthEdBLq+G9f22f0IPQHJlDYptewfXJr` +
    `c81J6CJFT16HQDIJVZIqYpno/JVNQjrhlbiw4zF4t4HJzMUkaa3kaXeRhutEHCEqtn` +
    `f37oALt2vxpIGZu6xFRLwQ8MS/rruFNZX9XCztcBKM3W2yuyxmo12gfn/34WigCh9K` +
    `Vq0IqbbrBLNX3EXti3dkQIOR9cbl0YxvrwNd4YI1tZnkjSH7UipIs0Kl09XYW2ynrj` +
    `FbWzb9LhFRF3PGY9uHCsmWkf6VM6fOZ0dlGXPSZWu6EwxN1h5cDeHojfmj9+R7rrj3` +
    `dxks2BAKTK6t9914P45fxRfjfU8qOIyA2PLKtOZL0d4jte6CFKaZrbkJKvVYPpvnpc` +
    `E17Kme25jr1o/lz8N123/tRFmO1S0mSVral2ojlWqZIE1idU2xwihZ67M23ndRfQhd` +
    `MHskZh1XlRN6DEnMeuWYmsAfPln83U+t2WUbFlSkSPK3Qfv+eLgqEYeAM5f/lUU8WA` +
    `zIgVjM8RhQLs7+LwAA//84PqOT2UAAAA==`)
  if err != nil {
  	panic(err)
  }
  container["templates/style.css"], err = decode(`` +
    `H4sICPSysFwA/2MzUjViR1V1WTNOegC0WW1v47gR/u5fwfpwvU2wdl72druRUaC9dA` +
    `sU6N0tNkVRoLgPlDSy2VCkSlJ2fIf894JvkkiTjpNsscBG5Aznjc88ouiLc/TXv/3r` +
    `x08Fopzf9x3qJTQ9RX9qoSYY/bcHQUCi84vZrOT1Hv02Q2hcU4JSIFDDmUISKFSKcK` +
    `aVkZlbNLgldF+g+RdecsXnb5HETC4kCNKsjKVA7bsf+I6We/QzA3R3+91qNCTJr1Cg` +
    `qw/dg17WYrEmrEDf22GH65qwdYEu7bjilIsCbbF4s1g0XMBa8J7VZ1pW4ureDr3COH` +
    `O2mj3OZi7zNy1hix2p1aZAf/jwsXs4M7kPRdDBT419A43+Z2MOor7+aMN61NYJ63r1` +
    `b7Xv4I9zBQ9q/svbYI71bQkinu2wlDsu6vkvxrcL6+ry8luTExc1iAJddQ9IckrqTO` +
    `pGbSFwTXo5FK/kDzpOUz+nUXIjWeygvCdqcUSj5b9mxY+z2cU5qnjbcoak2lMLo2VJ` +
    `1iaJ6b5e60QeZ7NlyWk9SndA1hulzdLayvXe9O3B+ku/XraY0lj80UtJxZkVEkoLVP` +
    `VCAFO3Gi6rSVmh1aONc+6GfAuioXxXoA2pa2B6riayo3hfoJLy6n41GLblr743ZZdK` +
    `8HvIwNEKPc4+fjuZo4TBf7iGuVF39aGE3VsgHgC5urYALnulOCtqInFJoUZx2owz8N` +
    `XW2wW172pc1whbd24r0e+RBIXUBiYObYN71F2/BHW+g6+CDl6UXCneOq10ku/PfOwP` +
    `X0B2nEmyBZ+A3BFVbQhba2baATDNBX3L0JuWl4TCGcKsRoLv0Jsa5L3i3ZlNZtjJho` +
    `KJSP9d1ERYSiucHS3BlKzZgihoZYEqYAqEjWhDahtIxyWxq3ApOe0VoN+RtuNCYaa0` +
    `CcW7Ai1ubm5uuodIRKFRadmws9aH57x3YUHfHXZ1zySo1Wt37GhzaCZbmMKMJQk58L` +
    `2La7KhIw47Qbhj15OYzCa7EDYGE+CI+43uVGONd7gial+gy+X707jfmWh41cvXmRi6` +
    `L2UleEEZmnjyvZPA+yFIBd8NLxq94NaC33c33eG99B3xPNj7juO7yJrupdNMueAG4F` +
    `67bfN2lw22Nd+CUKTC1ANK8c4qVuC4PfJl3zQtJgytBTH0tDSjQFeLdAD670JB21Gs` +
    `YGETtDBHV43wcA+1sAAsC1Pz+dJ4+iQEF2g5n87dcqYEp4lZYAot56ds8xD3qYFOj2` +
    `MU73mvkDuCZFNIJ5FLI5mIB9lo5TdfNO2oGM3HXfNN01w1V81qWO7dJQw4UairQ8jo` +
    `guPJi3MErEa8CUHhUeI9BmCZhnEqZnCv+OQ/vSvD6DiIKiXoLWfMnZj18I6z9SkP89` +
    `HCPwnsXrr2M8V7ECh6/JHXgJbm8RPFnYTaPP+lF1gHejKEp9V8cfmOQ/jVJXxdEV9Z` +
    `Rt9AQwQRpP38atCa5JrQHaXjChN1QlfPB1Ts36DLacCJhU60ShyvxzOcOdx8CM917k` +
    `19PfXji5Fy5GVfx5PbmIQfKxk1zb4l9PR8glliIjEfPH5DB3YJtvg51PI0hWizfydS` +
    `RZxwB1hUm2jyB8F3EuarAHZ6cQ56WhZqW7s5fSsNV1inuRVWGhX2oIC+qm4bg7pOtv` +
    `aFpH2s0NMW1/9PwrhTvJsMPwvYEt7LydRP+uveXnI8uY9ZFweEfcwR0mUJQW9MZoGv` +
    `/4/bxCSWXXE3HsYOQ8r7cRrxSh15fpWWJrARwcCjw7RugI2hmf9vyNAebjmTfQtDDF` +
    `+gA6yG4R1hazqRYlbz9lRY5O3PQ6W8lwATU3sZlnPikBJdTpklVhqucAFlVlhp5MPE` +
    `nPVhpHaF4us1hZ/ti8N8edZQcfvC0F+7NQhKWIpWAox44Ji35FqQATfDa/NU3OiDy1` +
    `UjjtM1rhTZgrb9D6IooGg8j7X+LJTm5njiUI+WfYuisdO19Yo9RyWOxKvc1dxBaFk7` +
    `Vh4bukwYMrHn7Whx6giQsPJkTKNSxqL+pkVS7z1hCCOqzWlI6Cn/3ft8JjmCCzTXpv` +
    `0ZQj9/FoSbh1ugdD656QjuxZ4+gU9DPj3Gl0eZjtMfcX00k9srf89z6Y9p40a9nS0Z` +
    `PKihCS/OU7eAV2fTuzHPcT6oGAZ+fvXMpn76ECaHrtJPw/l+FDpcyriB5QD/4SmWTJ` +
    `cGTR3A9yZxJr4+ASa2tO4W1F4ZhPXLVuZdI9B1I8zfaZWO4WesUZxVnF9YyBBFSf6S` +
    `Gea6Hr5qZJaz5IStBs0UKcmRjgK9I2anhOPX5L55pjJPRj3bgiANacC+rpaakcjhF5` +
    `2btk7c4EV8dZSqnGHPA274iSmxnweuM9c5ofSZjXi8B0PTnwVpsdjPU7I7qDirsQ/5` +
    `CRZNJHTKEeBxWg1ToEwtjOzrU5I2pT3YZvGjiJr8tMNvOIx1TEMEo5RGbGpCWVbb3g` +
    `Vzsf8Jt4CCUUxq/p38XAI7qPpXIjF/45OubSrzVB0ym3G8NKePJmQZxhnBLxCuAv00` +
    `nYXSaEWKLQNhQv8JNzFzxmXLLQwYtCbbCRsWTG0W1YbQ+g1sgZ29NXJ3MomFud9X3U` +
    `+Pxy2j6Aeg455SvxYlfx3KOuV1nc1Gy3LJnGL31FxSuolUXP30Nxlv0PnF/wIAAP//` +
    `MoB823wiAAA=`)
  if err != nil {
  	panic(err)
  }
  container["templates/theme-default.css"], err = decode(`` +
    `H4sICKLgrlwA/2RHaGxiV1V0WkdWbVlYVnNkQzVqYzNNPQAsy0GqwyAUheF5VnHAWU` +
    `AvL750cDNqoF1IjcVA5AYVHJTuvdh6/tkHh5NIwWsAaISTc/cbnkkiQilnZqJaq6k2` +
    `uyByZOMk0rE/qFpdgo9eJ78ZlzNGGgCt3R9DXb9bfjAx1HxrdbAMdZ9aHf4Z6rK2Os` +
    `ztsraW4f0JAAD//yXl0RehAAAA`)
  if err != nil {
  	panic(err)
  }
  container["templates/theme-juri.css"], err = decode(`` +
    `H4sICMeasFwA/2RHaGxiV1V0YW5WeWFTNWpjM009ADzMQa6DIBSF4TmruAkzE0RRA8` +
    `HVyAWf5mmvARoGTffe1Nqe4f8lx0aiDA8GICtAOtbgYY60w5LzkayUpZS6dAkXoi3V` +
    `SLvcVidLJ/IS9iBi8DWmBJVkDEAIN+H/X6T7zVvg2qM3w3jCTDH8oDn3AWwtcDehdu` +
    `EKygJHFVpUV+gtcNNMznzD8D7XptdqZM9XAAAA//+YhcaFwwAAAA==`)
  if err != nil {
  	panic(err)
  }
}

func Content(filename string) (*[]byte, error) {
  if file, ok := container[filename]; ok {
    return file.content, nil
  }
  return nil, fmt.Errorf("file2go %s not found", filename)
}

func ContentMust(filename string) *[]byte {
	content, err := Content(filename)
	if err != nil {
		panic(err)
	}
	return content
}

func ModTime(filename string) (*time.Time, error) {
  if file, ok := container[filename]; ok {
    return file.modTime, nil
  }
  return nil, fmt.Errorf("file2go %s not found", filename)
}

func ModTimeMust(filename string) *time.Time {
	modTime, err := ModTime(filename)
	if err != nil {
		panic(err)
	}
	return modTime
}

// eof